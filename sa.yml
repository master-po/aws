aws

ec2
    user data
        commands to be run when instance is initiated
    on-demand
        pay for what you use
        highest cost but not upfront payment
        no long term committment
        recommended for short-term and uninterrupted workloads with predictable application behavior
    reserved instance
        up to 75% discount compared to on-demand
        pay upfront
        1 or 3 year reservation
        reserve a specific instance type
        good for databases
    convertible reserved instance
        RI but can change instance type
        up to 54$ discount
    scheduled reserved instance
        launch within a reserved window
        only reuired to run periodically
    spot instances
        up to 90% discount compared to ondemand
        spot pricing is variable and a max price is set for the workloads
        workload won't run if spot pricing exceeds max
        can be one-time or persistent
            one-time runs once
            persistent runs whenevr price is below threshold
        best for workloads that are resilient to failure
            batch jobs
            data analysis
            image processing
            additional resources for peak usage
            not databases or critical jobs
        spot block
            spot instance that is reserved for 1-6 hours
        spot fleet
            pools of various spot instances can be selected from to get best pricing   
    dedicated host
        dedicated hardware
        provides user with visibility into underlying sockets/cores
        3 year reservation
        can be useful for PITA licensing
        good for strong compliance/security needs
    instance type
        R - good for apps that require a lot of RAM
        C - good for apps that require a lot of 
        M - good for medium apps such as web apps
        I - good for apps that require high storage IO
        G - good for apps that require GPU
        T2/T3 - busrtable instances
            utilizes burst credits
            credits accumulate over time
            similar to QoS tokens
        T2/T3 unlimited - unlimited burst
            no limit on bursts but there is a charge when it happens

AMI
    amazon machine image
    AMIs from  amazon marketplace can be selected or build your own
    right click on EC2 instance and choose create image
    stored in a specific region
    AMIs can be shared with another account using their account number
    sharing does not change ownership
    if they copy the AMI to another region, they own the copy
    you cant copy an encyrpted AMI that was shared with you
    you cant copy an AMI with an assocaited billingproduct code that was shared with you
    permit/deny copying AMI is controller by "create volume" check box on the permissions window

placement groups
    cluster
        ec2 instances are in same AZ and rack
        low-latency
        decreased availability due to lack of geographic diversity
    spread
        spans instances across multiple availability zones
        limited to 7 instances per AZ placement group
        used to maximize availability
    partition
        instances can be partitioned within a group
        up to 7 partitions per AZ
        used for big data apps like HDFS HBase, Cassandra, Kafka

elastic network interfaces - ENI
    basically a vnic
    can have primary ipv4 addr and 1 or more secondary IP
    can have a elastic public IP
    bound to a specific AZ
    interfaces can be created and assiigned/re-assigned between instances

ec2 hibernate
    preserves memory state
    does not reboot  OS
    only available in C M and R instance types
    max 150 GB RAM supported
    no supported on bare metal instances
    must use encrypted EBS
    on-demand and reserved instances only

ELB
    classic
        http(s) and tcp
        mostly deprecated
    application
        http(s) and websocket
        layer 7 only
        route traffic based on URL path, hostname, or query string
        good fit for containers and microservices
        would need mutliple classic load balancers to accomplish same tasks
        can route traffic to EC2 instances, ECS tasks, lambda functions, and private IP addresses
        health checks are performed at target group level
        server will receive client info in x-forwarded-for and x-forwarded-proto http headers
    network
        TCP TLS and UDP
        layer 4 load balancer
        about 100ms latency vs 400ms on ALB
        has static IP
            application and classic do not
        used for best performance
        must allow traffic from outside to access targets
            traffic appears to come from source, not LB
    common security group allows 80/443 from inet to LB  and then LB to the servers
    can scale but not instantaneously
        call aws for "warm-up" if needed
    stickiness
        uses cookies to ensure a client always reaches the same target
        maintains sessions
        might cause load imbalances
        works with classic and application load balancers
        enable by editing attributes in target group settings
    cross-zone load balancing
        enables load balancers to forward traffic to another AZ
        configured in attributes of lb
        classic lb
            disabled by default
            no charges for inter-AZ
        application lb
            always on, cant be disabled
            no charges for inter-AZ
        network lb
            disabled by default
            charges for inter-AZ traffic
    SNI - server name indication
        allows you to run multiple certs on the same lb
        supported for ALB and NLB, not CLB
        multiple listeners are configured for multiple  certs
    connection draining****
        instance de-registers itself
        used to give server time to process a request

ASG - auto scaling group
    scales ec2 instances out and in based on load within a defined range
    attributes
    launch configuration
        AMI + instance type
        EC2 user data
        EBS volumes
        Security groups
        SSH key pair
        min/max/initial size
        network + subnet info
        load balancer info
        scaling policies
    uses cloudwatch alarms to track metrics and trigger scaling
        metrics are computed for thee overall ASG instances
    possible rules
        target average CPU
        number of requests on ELB per instance
        average network in/out
        custom metric such as number of users
            metric is sent to cloudwatch via cloudwatch putmetric API
        schedule-based
    ASGs are free
    configured through launch config or templates
    IAM roles assigned to ASG will get assigned to EC2 instances
    terminates and creates new instances
        can be based  on  LB marking an instance as unhealthy
    target tracking scaling
        simple and easy setup
        example - avg cpu should be around 40%
    simple / step scaling
        add instances when upper threshold is reached
        remove instances when lower threshold is reached
    scheduled actions
        used when growth is anticiapted
        good for predictable capacity changes
    scaling cooldown
        default is 300 seconds
        used to ensure instances arent added/removed before previous scaling activity takes effect
        group-specific overrides default
        scale-in may be configured different from out since in is faster
    default termination policy
        removes instances from AZ with most  instances
        within an az, terminate the instance with oldest launch config/template
    lifecycle hooks
        when an instance is being created or terminated, \
        tasks can happen while in pending/terminating state
    templates should be used over configs
        templates can have versioning
        can have parameter subsets
        can provision on-demand or spot instances
        can use T2 unlimited burst

EBS
    network drive
    root volume is lost when an instance is terminated
    can be detached and re-attached to instances easily
    locked into single availability zone 
    can only be attached to one instance at a time
    GP2
        general performance SSD
        burstable like T2 instance
        3000-16000 IOPS
        up to 16TB
        IOPS is based on  volume siize
    IO 1
        highest performane SSD
        large database workloads
        up to 16TB
        generally max IOPS is 32,000 (nitro up to 64,000)
        IOPS is configurable
        max ratio of 50:1 IOPS to volume size
    ST 1
        low cost HDD volumes
        good for big data
        max IOPS 500
        throughput optimized - max throughput 500 MB/s
    SC 1
        lowest cost HDD
        up to 16TB
        max throughput 250 MB/s
    Only GP2 and IO1 can be root volumes
    lsblk - amazon linux command to view volumes
    snapshot
        incremental - onlt changed blocks are backed up
        resource intensive - done use during heavy load
        stored in s3 but you cant see them
        max 100K snapshots per account
        can be copied across AZ or region
        AMI can be made from snapshot
    migration
        create snapshot from volume and then copy to another region/AZ
    encryption
        data at rest, data in flight, snapshots, volumes from snapshot are all encrypted \
            when encryption is enabled
        minimal impact on latency
        uses keys from KMS
        encrypt unencrypted volume
            create snapshot
            encrypt snapshot
            create new volume from snapshot
            attach to instance
    instance store
        drive physically attached to disk
        better IO performacne than EBS
        survives reboots
        good for cachiing
        data is lost on reboot or termination
        cant resize instance store
        backups would need to be performed by user
        up to 7.5 TB
    RAID
        EBS is already redundant
        can be used to  increase performance or mirror volumes
        0 and 1 are only recommended RAID levels
        can give you up to 100K IOPS

EFS
    elastic file system
    NFS - POSIX filesystem
    not locked into single AZ like EBS
    3x cost GP2
    network file system that can be mounted on any EC2
    can be linked to multiple EC2 instances at the same time
        EBS can  obnly be  linked to one
    use security groups to control access
    only works for linux based AMI
    multiple storage tiers
        cold data can be used to EFS IA - infrequent access
    amazon-efs-utils is a package used to connect EFS shares

RDS
    continuous backups (point in time restore)
        daily full backups (defined by user)
        transaction logs backed up every 5 minutes
        7 day retention but can be increased to 35 days
    snapshots
        manually triggered by user
        can be retained indefinitely
    underlying OS is patched for you
    monitoring dashboards
    multii AZ setup for DR
    storage backed by EBS (gp2 or io1)
    vertical and horizontal scaling
    postgres - port 5432
    mysql - port 3306
    mariadb - 3306
    oracle - 1521
    mssql - 1433
    aurora - 3306 or 5432 depending on mode
    read replicas
        up to 5 can be created
        can be  within AZ, cross-AZ, or cross-region
            can be multi-AZ for DR
        eventually consistent asynchronous replication
        commonly used for reporting applications
        cross AZ network traffic will be charged
    multi AZ (DR)
        synchronous replication 
        works in active/standby pair
        failover database will become active during a failure
        not used for scaling
    encryption
        at-rest
            encrypt with KMS
            has to be defined at launch time
            read replicas cant be encrypted if master isnt
            TDE (transparent data encryption) is available for oracle and sql
        in-flight
            uses SSL certificates
            enforce SSL
                prostgresql and mysql require commands to configure
        snapshot will have same encryption state as db
        database can be encrypted by making a snapshot, encrypting, then restoring
    IAM policies are used to manage RDS
        users are within database
    IAM-based authentication works with mysql and postgresql
    IAM roles can be used for authentication
    Aurora
        proprietary and not open source
        optimized for AWS cloud
        compatible with mysql and postgresql tools
        storage grows in 10GB inicrements up to 64TB
        up to 15 replicas
        costs more but more efficient
        6 copies of data are stored across 3 AZ
        very high availability
        only one master can be written to
            writer endpoint is used to send writes to, it will forward to active db
        reader endpoint can read from any replica
        backtrack
            restore data from any point in time without backups/snapshots
        serverless
            automated instantiation
            auto-scaling (horizontal) based on usage
            good for infrequent, intermittent, unpredictable workloads
            no capacity planning needed
            pay per second
            can be more cost effective
            client will connect to proxy fleet which connects to a database
        global database
            1 primary region
            up to 5 secondary (read-only) regions
            replicaition lag is <1s
            up to 16 read replicas per secondary region

Elasticache
    in-memory database cache
    high performance low-latency
    helpps reduce load from intensive workloads
    helps make application stateless
    write scaling uses sharding
    read scaling uses replicas
    mult AZ failover capability
    query first goes to elasticache, if the data isnt there RDS is queried
    cache hit - queried data was in cache
    cache miss - queried data was not in cache
    queried data is cached after a cache miss
    helps with reads
    user session store
        shares user state data between instances?
    does not support IAM auth
    supports in-flight encryption
    lazy loading
        all accessed data is cached
        mey get stale data
    write through
        add or update data to cache when written
    session store
        data is stored temporarily but with a TTL for expiration
    REDIS
        mutli AZ failover
        supports read replicas
        data durability with AOF
            makes data persistent through reboots
        back up and restore features
        Redis AUTH
            password/token for accessing a redis cluster
        use security groups for auth
    memcached
        uses sharding
        non persistent cache
        no backup/restore features
        multi-threaded architecture
        SASL based authentication

Route 53
    supports public records
    supports private internal records
    $0.50 per month per hosted zone
    can use domains from 3rd party registrars
    Alias record
        similar to CNAME
        points to a AWS resource
        can be pointed to a root domain
        CNAME cant be pointed to a root domain
    simple routing policy
        cant have health checks attached
        can return more than one IP
            used for client-side load-balancing
    weighted routing policy
        controls percent of requests to go to each resource
        weights are added together and a percentage is derived
        health checks can be assigned
    latency
        dns should respond with closest record in nearest region
    health checks
        default threshold is 3 health checks passed/failed
        default check interval is 30 seconds from 15 health checkers
            2 second average between checks
        HTTP(S) and TCP health checks available
        no charge up to 50 endpoints
        more cost for advanced checks
    failover routing policy
        primary, secondary, and health checks are created
        primary is provided as long as it is healthy
        no health check is required for secondary record
    geo location
        routes based on user location
        countries and continents can be specified
        defualt can also be specified if it is not in a specific country
    multi value
        can return up to 8 records
        can be associated with health checks
        similar to simple for more features
